local Decimals = 4
local Clock = os.clock()
local ValueText = "Value Is Now :"

local boxespclr = Instance.new("Color3Value")
local boxesptrs = Instance.new("IntValue")
local hitboxtr =Instance.new("NumberValue")
hitboxtr.Value = 0

local chamstrs =  Instance.new("NumberValue")
local chamstrsFILL =  Instance.new("NumberValue")
chamstrsFILL.Value = 1
chamstrs.Value = 1

local longneckVAL =  Instance.new("NumberValue")
longneckVAL.Value = 0
local HitboxSIZE = Instance.new("Vector3Value")
HitboxSIZE.Parent = workspace
HitboxSIZE.Name = "HitboxSIZE.X"

boxesptrs.Value = 0
local key = game:GetService("UserInputService")


--
local BoxESP = {}
function BoxESP.Create(Player)
    local Box = Drawing.new("Square")
    Box.Visible = false
    Box.Color = boxespclr.Value
    Box.Filled = false
    Box.Transparency = 1
    Box.Thickness = 1

    local Updater

    local function UpdateBox()
        if Player and Player:IsA("Model") and Player:FindFirstChild("HumanoidRootPart") and Player:FindFirstChild("Head") then
            local Target2dPosition, IsVisible = workspace.CurrentCamera:WorldToViewportPoint(Player.HumanoidRootPart.Position)
            local scale_factor = 1 / (Target2dPosition.Z * math.tan(math.rad(workspace.CurrentCamera.FieldOfView * 0.5)) * 2) * 100
            local width, height = math.floor(40 * scale_factor), math.floor(62 * scale_factor)
            Box.Color = boxespclr.Value
            Box.Visible = IsVisible
            Box.Transparency = boxesptrs.Value
            Box.Size = Vector2.new(width, height)
            Box.Position = Vector2.new(Target2dPosition.X - Box.Size.X / 2, Target2dPosition.Y - Box.Size.Y / 2)
        else
            Box.Visible = false
            if not Player then
                Box:Remove()
                Updater:Disconnect()
            end
        end
    end

Updater = game:GetService("RunService").RenderStepped:Connect(UpdateBox)

    return Box
end



local Boxes = {}

local function EnableBoxESP()
    for _, Player in pairs(game:GetService("Workspace"):GetChildren()) do
        if Player:IsA("Model") and Player:FindFirstChild("HumanoidRootPart") and Player:FindFirstChild("Head") then
            local Box = BoxESP.Create(Player)
            table.insert(Boxes, Box)
        end
    end
end

game.Workspace.DescendantAdded:Connect(function(i)
    if i:IsA("Model") and i:FindFirstChild("HumanoidRootPart") and i:FindFirstChild("Head") then
        local Box = BoxESP.Create(i)
        table.insert(Boxes, Box)
    end
end)

EnableBoxESP()







--

local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/drillygzzly/Roblox-UI-Libs/main/1%20Tokyo%20Lib%20(FIXED)/Tokyo%20Lib%20Source.lua"))({
    cheatname = "Title Here", -- watermark text
    gamename = "Title Here", -- watermark text
})

library:init()

local Window1  = library.NewWindow({
    title = "Wagner | солдаты сука удачи", -- Mainwindow Text
    size = UDim2.new(0, 510, 0.6, 6
)})

local Tab1 = Window1:AddTab("  Combat  ")
local Tab2 = Window1:AddTab("  Visual  ")
local SettingsTab = library:CreateSettingsTab(Window1)

--Tab1:SetText("Text")



local Section1 = Tab1:AddSection("Hitboxes", 1)
local Section2 = Tab1:AddSection("Long Neck", 1)
local Section3 = Tab2:AddSection("Esp", 1)
--Section1:SetText("Text")


Section2:AddBind({
    enabled = true,
    text = "Long neck",
    tooltip = "Bind long neck",
    mode = "toggle",
    bind = "None",
    flag = "ToggleKey_1",
    state = false,
    nomouse = false,
    risky = false,
    noindicator = false,
    callback = function(v)
     game.workspace.Ignore.LocalCharacter.Top.CrouchForce.LimitsEnabled = true
     game.workspace.Ignore.LocalCharacter.Top.CrouchForce.MinLength = longneckVAL.Value
     if v == false then 
     game.workspace.Ignore.LocalCharacter.Top.CrouchForce.LimitsEnabled = false
     game.workspace.Ignore.LocalCharacter.Top.CrouchForce.MinLength = 3
     end
    end,
    keycallback = function(v)
  
    end
})


Section3:AddToggle({
    text = "EspBox",
    flag = "Toggle_1",
    callback = function(v)
        if v == true then
        boxesptrs.Value = 1
        end

        if v == false then
        boxesptrs.Value = 0
        end
    end
})

Section3:AddToggle({
    text = "Chams",
    flag = "Toggle_1",
    callback = function(v)
        if v == true then
        chamstrsFILL.Value = 0
        chamstrs.Value = 0
        while wait() do
        for v, i in pairs(workspace:GetChildren()) do
            if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("ROFLS") then
               local s = Instance.new("Highlight")
               s.Name = "ROFLS"
               s.Parent = i
          

            end
        end
    end
end

while wait() do 
     s.FillTransparency = chamstrsFILL.Value 
    s.OutlineTransparency = chamstrs.Value 
end


        if v == false then
        chamstrsFILL.Value = 1
        chamstrs.Value = 1
        end
    end
})

Section1:AddSeparator({
    enabled = true,
    text = "HItboxes"
})

Section1:AddButton({
    enabled = true,
    text = "Hitboxes",
    tooltip = "Make Head Hitboxes much higger",
    confirm = true,
    risky = false,
    callback = function()
        local SelectPart = "Head"

local HBTrans = 0.5

local PurpleColor = BrickColor.new("Bright violet")

local hitboxlist = {}

task.spawn(function ()
    while wait() do
        for v, i in pairs(workspace:GetChildren()) do
            if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("Fake") then
               i.Head.Size = Vector3.new(HitboxSIZE.Value.X,HitboxSIZE.Value.Y,HitboxSIZE.Value.Z)
               i.Head.CanCollide = false
               i.Head.Transparency = hitboxtr.Value 
            end
        end
    end
end)
    end
})




-- Button1:SetText("Text")

Section1:AddSlider({
    enabled = true,
    text = "Hitboxes size",
    tooltip = "select hitbox size",
    flag = "Slider_1",
    suffix = "",
    dragging = true,
    focused = false,
    min = 0,
    max = 11.5,
    increment = 0.1,
    risky = false,
    callback = function(v)
        HitboxSIZE.Value = Vector3.new(v,v,v)
    end
})

Section1:AddSlider({
    enabled = true,
    text = "Hitboxes Transparency",
    tooltip = "select hitbox Hitboxes Transparency",
    flag = "Slider_1",
    suffix = "",
    dragging = true,
    focused = false,
    min = 0,
    max = 1,
    increment = 0.1,
    risky = false,
    callback = function(v)
        hitboxtr.Value  = v
    end
})

Section2:AddSlider({
    enabled = true,
    text = "Long neck",
    tooltip = "select long neck Value",
    flag = "Slider_1",
    suffix = "",
    dragging = true,
    focused = false,
    min = 3,
    max = 15,
    increment = 0.1,
    risky = false,
    callback = function(v)
        longneckVAL.Value = v
    end
})
--Slider_1:SetValue(100)



Section3:AddColor({
    enabled = true,
    text = "Box esp color",
    tooltip = "tooltip1",
    color = Color3.fromRGB(255, 255, 255),
    flag = "Color_1",
    trans = 0,
    open = false,
    risky = false,
    callback = function(v)
        boxespclr.Value = v
    end
})

local Time = (string.format("%."..tostring(Decimals).."f", os.clock() - Clock))
library:SendNotification(("Loaded In "..tostring(Time)), 6)

--[[
    --Window1:SetOpen(false)
    makefolder("Title Here")
    library:SetTheme(Default)
    library:GetConfig(Default)
    library:LoadConfig(Default)
    library:SaveConfig(Default)
]]
